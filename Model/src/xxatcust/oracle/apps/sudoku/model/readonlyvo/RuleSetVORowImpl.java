package xxatcust.oracle.apps.sudoku.model.readonlyvo;

import oracle.jbo.Key;
import oracle.jbo.Row;
import oracle.jbo.RowSet;
import oracle.jbo.server.AttributeDefImpl;
import oracle.jbo.server.ViewRowImpl;
// ---------------------------------------------------------------------
// ---    File generated by Oracle ADF Business Components Design Time.
// ---    Fri Apr 26 07:19:36 IST 2019
// ---    Custom code may be added to this class.
// ---    Warning: Do not modify method signatures of generated methods.
// ---------------------------------------------------------------------
public class RuleSetVORowImpl extends ViewRowImpl {
    /**
     * AttributesEnum: generated enum for identifying attributes and accessors. DO NOT MODIFY.
     */
    public enum AttributesEnum {
        TopLevelCode {
            public Object get(RuleSetVORowImpl obj) {
                return obj.getTopLevelCode();
            }

            public void put(RuleSetVORowImpl obj, Object value) {
                obj.setTopLevelCode((String)value);
            }
        },
        TopLevelMeaning {
            public Object get(RuleSetVORowImpl obj) {
                return obj.getTopLevelMeaning();
            }

            public void put(RuleSetVORowImpl obj, Object value) {
                obj.setTopLevelMeaning((String)value);
            }
        },
        SecondLevelCode {
            public Object get(RuleSetVORowImpl obj) {
                return obj.getSecondLevelCode();
            }

            public void put(RuleSetVORowImpl obj, Object value) {
                obj.setSecondLevelCode((String)value);
            }
        },
        SecondLevelMeaning {
            public Object get(RuleSetVORowImpl obj) {
                return obj.getSecondLevelMeaning();
            }

            public void put(RuleSetVORowImpl obj, Object value) {
                obj.setSecondLevelMeaning((String)value);
            }
        },
        LOVSwitcher {
            public Object get(RuleSetVORowImpl obj) {
                return obj.getLOVSwitcher();
            }

            public void put(RuleSetVORowImpl obj, Object value) {
                obj.setLOVSwitcher((String)value);
            }
        },
        RuleSetTopLevelLOV1 {
            public Object get(RuleSetVORowImpl obj) {
                return obj.getRuleSetTopLevelLOV1();
            }

            public void put(RuleSetVORowImpl obj, Object value) {
                obj.setAttributeInternal(index(), value);
            }
        },
        RSetSecLevelLOVI1 {
            public Object get(RuleSetVORowImpl obj) {
                return obj.getRSetSecLevelLOVI1();
            }

            public void put(RuleSetVORowImpl obj, Object value) {
                obj.setAttributeInternal(index(), value);
            }
        },
        RSetSecLevelLOVII1 {
            public Object get(RuleSetVORowImpl obj) {
                return obj.getRSetSecLevelLOVII1();
            }

            public void put(RuleSetVORowImpl obj, Object value) {
                obj.setAttributeInternal(index(), value);
            }
        };
        private static AttributesEnum[] vals = null;
        private static final int firstIndex = 0;

        public abstract Object get(RuleSetVORowImpl object);

        public abstract void put(RuleSetVORowImpl object, Object value);

        public int index() {
            return AttributesEnum.firstIndex() + ordinal();
        }

        public static final int firstIndex() {
            return firstIndex;
        }

        public static int count() {
            return AttributesEnum.firstIndex() +
                AttributesEnum.staticValues().length;
        }

        public static final AttributesEnum[] staticValues() {
            if (vals == null) {
                vals = AttributesEnum.values();
            }
            return vals;
        }
    }
    public static final int TOPLEVELCODE = AttributesEnum.TopLevelCode.index();
    public static final int TOPLEVELMEANING =
        AttributesEnum.TopLevelMeaning.index();
    public static final int SECONDLEVELCODE =
        AttributesEnum.SecondLevelCode.index();
    public static final int SECONDLEVELMEANING =
        AttributesEnum.SecondLevelMeaning.index();
    public static final int LOVSWITCHER = AttributesEnum.LOVSwitcher.index();
    public static final int RULESETTOPLEVELLOV1 =
        AttributesEnum.RuleSetTopLevelLOV1.index();
    public static final int RSETSECLEVELLOVI1 =
        AttributesEnum.RSetSecLevelLOVI1.index();
    public static final int RSETSECLEVELLOVII1 =
        AttributesEnum.RSetSecLevelLOVII1.index();

    /**
     * This is the default constructor (do not remove).
     */
    public RuleSetVORowImpl() {
    }

    /**
     * Gets the attribute value for the calculated attribute TopLevelCode.
     * @return the TopLevelCode
     */
    public String getTopLevelCode() {
        return (String)getAttributeInternal(TOPLEVELCODE);
    }

    /**
     * Sets <code>value</code> as the attribute value for the calculated attribute TopLevelCode.
     * @param value value to set the  TopLevelCode
     */
    public void setTopLevelCode(String value) {
        setAttributeInternal(TOPLEVELCODE, value);
    }

    /**
     * Gets the attribute value for the calculated attribute TopLevelMeaning.
     * @return the TopLevelMeaning
     */
    public String getTopLevelMeaning() {
        return (String)getAttributeInternal(TOPLEVELMEANING);
    }

    /**
     * Sets <code>value</code> as the attribute value for the calculated attribute TopLevelMeaning.
     * @param value value to set the  TopLevelMeaning
     */
    public void setTopLevelMeaning(String value) {
        setAttributeInternal(TOPLEVELMEANING, value);
    }

    /**
     * Gets the attribute value for the calculated attribute SecondLevelCode.
     * @return the SecondLevelCode
     */
    public String getSecondLevelCode() {
        return (String)getAttributeInternal(SECONDLEVELCODE);
    }

    /**
     * Sets <code>value</code> as the attribute value for the calculated attribute SecondLevelCode.
     * @param value value to set the  SecondLevelCode
     */
    public void setSecondLevelCode(String value) {
        setAttributeInternal(SECONDLEVELCODE, value);
    }

    /**
     * Gets the attribute value for the calculated attribute SecondLevelMeaning.
     * @return the SecondLevelMeaning
     */
    public String getSecondLevelMeaning() {
        String secLevelMeaning = null;
        if (getAttributeInternal(TOPLEVELCODE) != null) {

            Object topLevelCode = getAttributeInternal(TOPLEVELCODE);
            if (topLevelCode != null && topLevelCode.equals("E8000SYS")) {
                System.out.println("topLevelCode:" + topLevelCode);
                Object[] obj = { topLevelCode };
                Key key = new Key(obj);
                Row[] rows = this.getRSetSecLevelLOVII1().findByKey(key, 1);
                if (rows != null && rows.length > 0) {
                    secLevelMeaning = (String)rows[0].getAttribute("Meaning");
                    System.out.println("Second Level Meaning from VORowImpl:" +
                                       secLevelMeaning);
                }

            } else if (topLevelCode != null &&
                       topLevelCode.equals("E8000SYS")) {
                Object[] obj = { topLevelCode };
                Key key = new Key(obj);
                Row[] rows = this.getRSetSecLevelLOVI1().findByKey(key, 1);
                if (rows != null && rows.length > 0) {
                    secLevelMeaning = (String)rows[0].getAttribute("Meaning");
                    System.out.println("Second Level Meaning from VORowImpl:" +
                                       secLevelMeaning);
                }
            }
        }


        return secLevelMeaning;
    }

    /**
     * Sets <code>value</code> as the attribute value for the calculated attribute SecondLevelMeaning.
     * @param value value to set the  SecondLevelMeaning
     */
    public void setSecondLevelMeaning(String value) {
        setAttributeInternal(SECONDLEVELMEANING, value);
    }

    /**
     * Gets the attribute value for the calculated attribute LOVSwitcher.
     * @return the LOVSwitcher
     */
    public String getLOVSwitcher() {
        return (String)getAttributeInternal(LOVSWITCHER);
    }

    /**
     * Sets <code>value</code> as the attribute value for the calculated attribute LOVSwitcher.
     * @param value value to set the  LOVSwitcher
     */
    public void setLOVSwitcher(String value) {
        setAttributeInternal(LOVSWITCHER, value);
    }

    /**
     * Gets the view accessor <code>RowSet</code> RuleSetTopLevelLOV1.
     */
    public RowSet getRuleSetTopLevelLOV1() {
        return (RowSet)getAttributeInternal(RULESETTOPLEVELLOV1);
    }

    /**
     * Gets the view accessor <code>RowSet</code> RSetSecLevelLOVI1.
     */
    public RowSet getRSetSecLevelLOVI1() {
        return (RowSet)getAttributeInternal(RSETSECLEVELLOVI1);
    }

    /**
     * Gets the view accessor <code>RowSet</code> RSetSecLevelLOVII1.
     */
    public RowSet getRSetSecLevelLOVII1() {
        return (RowSet)getAttributeInternal(RSETSECLEVELLOVII1);
    }

    /**
     * getAttrInvokeAccessor: generated method. Do not modify.
     * @param index the index identifying the attribute
     * @param attrDef the attribute

     * @return the attribute value
     * @throws Exception
     */
    protected Object getAttrInvokeAccessor(int index,
                                           AttributeDefImpl attrDef) throws Exception {
        if ((index >= AttributesEnum.firstIndex()) &&
            (index < AttributesEnum.count())) {
            return AttributesEnum.staticValues()[index -
                AttributesEnum.firstIndex()].get(this);
        }
        return super.getAttrInvokeAccessor(index, attrDef);
    }

    /**
     * setAttrInvokeAccessor: generated method. Do not modify.
     * @param index the index identifying the attribute
     * @param value the value to assign to the attribute
     * @param attrDef the attribute

     * @throws Exception
     */
    protected void setAttrInvokeAccessor(int index, Object value,
                                         AttributeDefImpl attrDef) throws Exception {
        if ((index >= AttributesEnum.firstIndex()) &&
            (index < AttributesEnum.count())) {
            AttributesEnum.staticValues()[index -
                AttributesEnum.firstIndex()].put(this, value);
            return;
        }
        super.setAttrInvokeAccessor(index, value, attrDef);
    }
}
