package xxatcust.oracle.apps.sudoku.model.module;

import java.math.BigDecimal;

import java.sql.CallableStatement;


import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;

import java.sql.Types;

import java.util.Hashtable;

import javax.servlet.ServletContext;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import oracle.adf.share.ADFContext;
import oracle.adf.share.logging.ADFLogger;

import oracle.apps.fnd.ext.common.AppsRequestWrapper;
import oracle.apps.fnd.ext.common.CookieStatus;
import oracle.apps.fnd.ext.common.EBiz;
import oracle.apps.fnd.ext.common.Session;

import oracle.jbo.Row;
import oracle.jbo.RowSetIterator;
import oracle.jbo.SessionData;
import oracle.jbo.ViewCriteria;
import oracle.jbo.server.ApplicationModuleImpl;
import oracle.jbo.server.DBTransaction;

import oracle.jbo.server.ViewObjectImpl;

import xxatcust.oracle.apps.sudoku.model.module.common.SudokuAM;
//import xxatcust.oracle.apps.sudoku.model.readonlyvo.QuotesVOImpl;


// ---------------------------------------------------------------------
// ---    File generated by Oracle ADF Business Components Design Time.
// ---    Thu Jan 24 16:53:17 IST 2019
// ---    Custom code may be added to this class.
// ---    Warning: Do not modify method signatures of generated methods.
// ---------------------------------------------------------------------
public class SudokuAMImpl extends ApplicationModuleImpl implements SudokuAM {
    /**
     * This is the default constructor (do not remove).
     */
    public SudokuAMImpl() {
    }
    static String url = null;
    private static ADFLogger _logger =
        ADFLogger.createADFLogger(SudokuAMImpl.class);
    AppsRequestWrapper wrappedRequest = null;
    HttpServletRequest request = null;
    HttpServletResponse response = null;
    Session appsSession = null;

    public Session getAppsSession() {
        return appsSession;
    }

    public String getCurrentUrl() {

        String currentUrlName = "";
        DBTransaction trans = getDBTransaction();
        Statement statement = null;
        ResultSet rows = null;
        String plsql =
            "select replace(HOME_URL,'AppsLogin') home_url from icx_parameters";

        statement = trans.createStatement(2);
        try {
            rows = statement.executeQuery(plsql);
            while (rows.next()) {
                currentUrlName = rows.getString("home_url");
            }
        } catch (Exception obj) {
            obj.printStackTrace();
        } finally {
            try {
                if (rows != null) {
                    rows.close();
                }
                if (statement != null) {
                    statement.close();
                }
            } catch (SQLException sqle) {
                sqle.printStackTrace();
            }
        }
        return currentUrlName;

    }

    public String getWrappedRequestAgent() {
        String agent = wrappedRequest.getEbizInstance().getAppsServletAgent();
        return agent;
    }

    private Connection getCurrentConnection() {
        Statement st = null;
        try {
            st = this.getDBTransaction().createStatement(0);
            return st.getConnection();
        } catch (SQLException s) {
            s.printStackTrace();
            return null;
        } finally {
            if (st != null) {
                try {
                    st.close();
                } catch (SQLException s2) {
                    _logger.info("HSOEOrderStatusAMImpl : getCurrentConnection-3 : 11111");
                    ;
                }
            }
        }
    }

    private String getApplServerId() {
        ServletContext servContext =
            (ServletContext)ADFContext.getCurrent().getEnvironment().getContext();
        String applServerId = servContext.getInitParameter("APPL_SERVER_ID");

        return applServerId;
    }

    public boolean checkEBSSession(HttpServletRequest request,
                                   HttpServletResponse response) {
        try {

            CookieStatus icxCookieStatus = null;
            Connection EBSconn = this.getCurrentConnection();
            EBiz instance = new EBiz(EBSconn, this.getApplServerId());
            _logger.info("Bundle AMimp: print ApplServerId " +
                         this.getApplServerId());
            _logger.info("Bundle AMimp: print instance " + instance);
            wrappedRequest =
                    new AppsRequestWrapper(request, response, EBSconn, instance);
            appsSession = wrappedRequest.getAppsSession();
            _logger.info("Bundle AMimp: print appsSession " + appsSession);

            icxCookieStatus =
                    appsSession.getCurrentState().getIcxCookieStatus();
            _logger.info("Bundle AMimp: print icxCookieStatus " +
                         icxCookieStatus);
            response.addHeader("X-UA-Compatible", "IE=EmulateIE9");

            if (!icxCookieStatus.equals(CookieStatus.VALID)) {
                return false;
            }
        } catch (Exception ob) {
            ob.printStackTrace();
            return false;
        }

        return true;
    }

    public Hashtable<String, String> getNodeCategoryMap() {
        ViewObjectImpl nodeCategoryVO = this.getNodeCategoryVO1();
        nodeCategoryVO.executeQuery();
        RowSetIterator rsi = nodeCategoryVO.createRowSetIterator(null);
        Hashtable<String, String> nodeCategoryMap =
            new Hashtable<String, String>();
        while (rsi.hasNext()) {
            Row currRow = rsi.getCurrentRow();
            if (currRow != null && currRow.getAttribute("Segment1") != null &&
                currRow.getAttribute("Attribute7") != null) {
                nodeCategoryMap.put((String)currRow.getAttribute("Segment1"),
                                    (String)currRow.getAttribute("Attribute7"));
            }
        }
        rsi.closeRowSetIterator();
        return nodeCategoryMap;
    }

    //    public void callGlobalpackage(){
    //        CallableStatement  cs = getDBTransaction().createCallableStatement("fnd_global.set_nls_context('AMERICAN')", 0);
    //
    //        if(cs !=null){
    //            try {
    //                cs.execute();
    //            } catch (SQLException e) {
    //                e.printStackTrace();
    //            }
    //            finally{
    //                if(cs!=null){
    //                    try{
    //                    cs.close();
    //                    }
    //                    catch(Exception e){
    //                        e.printStackTrace();
    //                        }
    //                    }
    //                }
    //        }
    //
    //
    //        }
    
    public void getQuoteCustmerAddress(){
        String query = "SELECT \n" + 
        "  hzsu.site_use_id   SITE_USE_ID,\n" + 
        "  hzl.address1||DECODE(hzl.address2,\n" + 
        "  NULL,\n" + 
        "  NULL,\n" + 
        "  ',\n" + 
        "  '||hzl.address2)||',\n" + 
        "  '||hzl.city||',\n" + 
        "  '||hzl.country||',\n" + 
        "  '||hzl.postal_code LOCATION,\n" + 
        "  hzp.party_id,\n" + 
        "  hzp.PARTY_NAME\n" + 
        "FROM \n" + 
        "  hz_parties hzp,\n" + 
        "  hz_cust_accounts hza,\n" + 
        "  hz_cust_acct_sites_all hzas,\n" + 
        "  hz_cust_site_uses_all hzsu,\n" + 
        "  hz_party_sites hzps,\n" + 
        "  hz_locations hzl\n" + 
        "WHERE \n" + 
        "hzp.party_id = ?    and\n" + 
        "  hza.party_id = hzp.party_id      AND\n" + 
        "  hzas.cust_account_id = hza.cust_account_id      --AND\n" + 
        "  and hzps.party_site_id = hzas.party_site_id      AND\n" + 
        "  hzl.location_id = hzps.location_id      AND\n" + 
        "  hzsu.site_use_code = ?      AND\n" + 
        "  hzsu.PRIMARY_FLAG='Y' AND\n" + 
        "  hzsu.ORG_ID=? AND\n" + 
        "  hzsu.cust_acct_site_id = hzas.cust_acct_site_id      AND\n" + 
        "  hzsu.org_id = hzas.org_id\n "; 
        String shipTo ="";
        String quoteTo = "";
        PreparedStatement cs = null,cs1 = null;
        
        ViewObjectImpl quoteVO = this.getQuotesVO();
        if(quoteVO !=null){
            Row row = quoteVO.getCurrentRow();
            if(row!=null){
            BigDecimal partyId = (BigDecimal)row.getAttribute("PartyId");
            BigDecimal orgid = (BigDecimal)row.getAttribute("OrgId");
            
                    try {
            cs = this.getDBTransaction().createPreparedStatement(query, 0);   
                    cs.setBigDecimal(1, partyId);
                    cs.setString(2, "BILL_TO");
                    cs.setBigDecimal(3, orgid);
                       
              ResultSet rs = cs.executeQuery();
                        while(rs.next()){
                          quoteTo = rs.getString(2);
                            System.out.println("quoteTo is:"+quoteTo);
                            }
                cs1 = this.getDBTransaction().createPreparedStatement(query, 0);       
                    cs1.setBigDecimal(1, partyId);
                    cs1.setString(2, "SHIP_TO");
                    cs1.setBigDecimal(3, orgid);
                    ResultSet rs1 = cs1.executeQuery();
                        while(rs1.next()){
                          shipTo = rs1.getString(2);
                                System.out.println("ShipTo is:"+shipTo);
                            }
             row.setAttribute("QuoteTo", quoteTo);   
             row.setAttribute("ShipTo", shipTo);   
            System.out.println("QuoteTo:"+quoteTo+":shipto:"+shipTo);
             
                } catch (SQLException e) {
                        e.printStackTrace();
                }                    
            }
            }
        }

    public String callQuoteAPI() {
        ViewObjectImpl quoteVO = this.getQuotesVO();
        String returnval = null;
        StringBuilder errorMsg = new StringBuilder("<html><body>");
        String returnMessage = "";
        //        callGlobalpackage();
        //        DBTransaction dbTrans = (DBTransaction)this.getTransaction();
        if (quoteVO != null) {
            Row quoteVORow = quoteVO.getCurrentRow();
            if (quoteVORow != null) {
                CallableStatement cs = null;
                String stmt =
                    "apps.XXAT_ASO_QUOTE_PKG.create_quote_hdr(:1,:2,:3,:4,:5,:6,:7,:8,:9,:10,:11,:12,:13,:14,:15,:16,:17)";

                try {
                    //            cs = dbTrans.createCallableStatement(("BEGIN xxat_quote_create_pkg.create_quote_hdr(?,?,?,?,?,?,?,?,?,?,?,?"+
                    //                                                                             ");" + "END;"), 12);


                    cs =
 this.getDBTransaction().createCallableStatement("begin " + stmt + "; end;",
                                                 0);

                    if (quoteVORow.getAttribute("OrganizationUnit") != null) {
                        cs.setString(1,
                                     quoteVORow.getAttribute("OrganizationUnit").toString());
                        System.out.println("OrganizationUnit:" +
                                           quoteVORow.getAttribute("OrganizationUnit").toString());
                    }
                    else{
                        errorMsg.append("<p><b>Organization Unit is required.</b></p>");
                        }
                    if (quoteVORow.getAttribute("QuoteDescription") != null) {
                        cs.setString(2,
                                     quoteVORow.getAttribute("QuoteDescription").toString());
                        System.out.println("QuoteDescription:" +
                                           quoteVORow.getAttribute("QuoteDescription").toString());
                    }
                    else{
                        errorMsg.append("<p><b>Quote Description is required.</b></p>");
                        }
                    if (quoteVORow.getAttribute("CustomerNumber") != null) {
                        cs.setString(3,
                                     quoteVORow.getAttribute("CustomerNumber").toString());
                        System.out.println("CustomerNumber:" +
                                           quoteVORow.getAttribute("CustomerNumber").toString());
                    }
                    else{
                        errorMsg.append("<p><b>Customer Number is required.</b></p>");
                        }
                    if (quoteVORow.getAttribute("OrderType") != null) {
                        cs.setString(4,
                                     quoteVORow.getAttribute("OrderType").toString());
                        System.out.println("OrderType:" +
                                           quoteVORow.getAttribute("OrderType").toString());
                    }
                    else{
                        errorMsg.append("<p><b>Order Type is required.</b></p>");
                        }
                    //                if(quoteVORow.getAttribute("OrganizationUnit")!=null)
                    cs.setString(5, "Systems Corporate Price List");
                    System.out.println("Price List:" +
                                       "Systems Corporate Price List");
                    if (quoteVORow.getAttribute("SalesChannel") != null) {
                        cs.setString(6,
                                     quoteVORow.getAttribute("SalesChannel").toString());
                        System.out.println("SalesChannel:" +
                                           quoteVORow.getAttribute("SalesChannel").toString());
                    }
                    else{
                        errorMsg.append("<p><bSales Channel is required.</b></p>");
                        }
                    if (quoteVORow.getAttribute("SalesRepresentative") !=null) {
                        cs.setString(7,
                                     quoteVORow.getAttribute("SalesRepresentative").toString());
                        System.out.println("SalesRepresentative:" +
                                           quoteVORow.getAttribute("SalesRepresentative").toString());
                    }
                    else{
                        errorMsg.append("<p><b>Sales Representative is required.</b></p>");
                                            }
                    
                    if (quoteVORow.getAttribute("PaymentTerms") != null) {
                        cs.setString(8,
                                     quoteVORow.getAttribute("PaymentTerms").toString());
                        System.out.println("PaymentTerms:" +
                                           quoteVORow.getAttribute("PaymentTerms").toString());
                    }
                    else{
                        errorMsg.append("<p><b>Payment Terms is required.</b></p>");
                        }
                    if (quoteVORow.getAttribute("Currency") != null) {
                        cs.setString(9,
                                     quoteVORow.getAttribute("Currency").toString());
                        System.out.println("Currency:" +
                                           quoteVORow.getAttribute("Currency").toString());
                    }
                    else{
                        errorMsg.append("<p><b>Currency is required.</b></p>");
                        }
                    
                    if (quoteVORow.getAttribute("IncoTerms") != null) {
                        cs.setString(10,
                                     quoteVORow.getAttribute("IncoTerms").toString());
                        System.out.println("IncoTerms:" +
                                           quoteVORow.getAttribute("IncoTerms").toString());
                    }
                    else{
                        errorMsg.append("<p><b>Inco Terms is required.</b></p>");
                        }
                    if (quoteVORow.getAttribute("CustomerSupportRepresent") !=null) {
                        cs.setString(11,
                                     quoteVORow.getAttribute("CustomerSupportRepresent").toString());
                        System.out.println("CustomerSupportRepresent:" +
                                           quoteVORow.getAttribute("CustomerSupportRepresent").toString());
                    }
                    else{
                        errorMsg.append("<p><b>Organization Unit is required.</b></p>");
                        }
                    if(quoteVORow.getAttribute("DealId")!=null){
                            cs.setString(12,quoteVORow.getAttribute("DealId").toString());
                            }
                    else{
                        errorMsg.append("<p><b>Deal Id is required.</b></p>");
                        }
                    if(quoteVORow.getAttribute("AttentionToOrDept")!=null){
                            cs.setString(13,quoteVORow.getAttribute("AttentionToOrDept").toString());
                            }
                    else{
                        errorMsg.append("<p><b>AttentionTo/Dept is required.</b></p>");
                        }
                    if(quoteVORow.getAttribute("QuoteEmail")!=null){
                            cs.setString(14,quoteVORow.getAttribute("QuoteEmail").toString());
                            }
                    else{
                        errorMsg.append("<p><b>Email is required.</b></p>");
                        }
                    
//                    cs.setString(1, "USS-OU-8203");
//                    cs.setString(2, "Test Quote--Nik");
//                    cs.setString(3, "103413");
//                    cs.setString(4, "USS-8203 Sales: Trade");
//                    cs.setString(5, "Systems Corporate Price List");
//                    cs.setString(6, "AKM");
//                    cs.setString(7, "No Sales Credit");
//                    cs.setString(8, "20-280-E-JPY");
//                    cs.setString(9, "USD");
//                    cs.setString(10, "DAP");
//                    cs.setString(11, "Abdul Jamil, Yasmin (Yasmin)");
//                    cs.setString(12, "1234567");
//                    cs.setString(13, "Attemtiona to Dept");
//                    cs.setString(14, "bcdefg@xyz.com");
                    cs.setInt(15,51157);
                    cs.setInt(16, 11639);
                    cs.registerOutParameter(17, Types.VARCHAR);
                    errorMsg.append("</body></html>");
                        if(errorMsg ==null && "<html><body></body></html>".equals(errorMsg)){
                                cs.executeUpdate();
                            }
                    
                    returnMessage = cs.getString(17);
                   
                    if (returnMessage != null)
                        System.out.println("return Message is:" +returnMessage + " ::msg::");
                    if(returnMessage.contains("Quote Header Id")){
                            String[] arrOfStr = returnMessage.split(": ", 2); 
                            quoteVORow.setAttribute("AdvantestQuotationNumber", arrOfStr[1]);
                        }                    
                }
                catch (Exception e) {
                    e.printStackTrace();
                } finally {
                    try {
                        if (cs != null)
                            cs.close();
                    } catch (SQLException s) {
                        s.printStackTrace();
                    }
                }
            }

        }
        if(errorMsg !=null && !"<html><body></body></html>".equals(errorMsg)){
            returnval = errorMsg.toString();
            }
        else{
                returnval = returnMessage;
            }
        return returnval;
    }

    public void searchQuote() {
        ViewObjectImpl quoteSearchVO = this.getQuoteSearchVO();
        Row quoteSearchVORow = quoteSearchVO.getCurrentRow();
        ViewObjectImpl quoteResultTabVO = this.getQuoteSearchTabVO();
        if (quoteResultTabVO != null) {
            quoteResultTabVO.setWhereClause(null);
            quoteResultTabVO.applyViewCriteria(null);
            quoteResultTabVO.reset();
            ViewCriteria quoteSearchTabVC =
                quoteResultTabVO.getViewCriteria("QuoteSearchTabVC");
            quoteSearchTabVC.resetCriteria();
            quoteResultTabVO.setNamedWhereClauseParam("p_quoteNum", null);
            quoteResultTabVO.setNamedWhereClauseParam("p_custName", null);
            quoteResultTabVO.setNamedWhereClauseParam("p_orgId", null);
            quoteResultTabVO.setNamedWhereClauseParam("p_quoteNum",
                                                      quoteSearchVORow.getAttribute("QuoteNumber"));
            quoteResultTabVO.setNamedWhereClauseParam("p_custName",
                                                      quoteSearchVORow.getAttribute("Customer"));
            quoteResultTabVO.setNamedWhereClauseParam("p_orgId",
                                                      quoteSearchVORow.getAttribute("OUId"));
//            System.out.println("Quote Number" +
//                               quoteSearchVORow.getAttribute("QuoteNumber"));
//            System.out.println("Org id" +
//                               quoteSearchVORow.getAttribute("OUId"));
            quoteResultTabVO.applyViewCriteria(null);
            quoteResultTabVO.applyViewCriteria(quoteSearchTabVC);
//            String query = quoteResultTabVO.getQuery().toString();
//            System.out.println("query is:" + query);
            quoteResultTabVO.executeQuery();

        }


    }

 /*    public void getFaxNum() {
        ViewObjectImpl queryVO = this.getQuotesVO();
        Row row = queryVO.getCurrentRow();
        
        BigDecimal parentId;
        System.out.println("Description:"+row.getAttribute("QuoteDescription"));
        System.out.println("Customer name is:"+row.getAttribute("CustomerName"));
        System.out.println("CSR" +
                           row.getAttribute("CustomerSupportRepresent"));
        System.out.println("CCN" + row.getAttribute("CustomerContactName"));

        System.out.println(row.getAttribute("Customerparentid"));
        parentId = (BigDecimal)row.getAttribute("Customerparentid");
        String faxNum = null;
        PreparedStatement pstmt = null;
        String faxNumber =
            "select PHONE_NUMBER Fax from per_phones where PHONE_TYPE='WF' AND parent_id=?";
        if (parentId != null)
            pstmt = getDBTransaction().createPreparedStatement(faxNumber, 0);
        try {
            pstmt.setBigDecimal(1, parentId);
            pstmt.execute();
            ResultSet rs = pstmt.getResultSet();
            while (rs.next()) {
                faxNum = rs.getString(1);
                System.out.println("fax Number is:" + faxNum);
            }

            row.setAttribute("CustomerFaxNum", faxNum);
        } catch (SQLException sqle) {
            // TODO: Add catch code
            sqle.printStackTrace();
        } finally {
            try {
                if (pstmt != null) {
                    pstmt.close();
                }
            } catch (SQLException closeerr) {
                closeerr.printStackTrace();
            }
        }
    }    */

    //    public void getFaxNum(){
    //
    //        ViewObjectImpl vo =
    //
    //        }
    
    public void initQuoteSearch(){
        ViewObjectImpl searchVO = this.getQuoteSearchVO();
        ViewObjectImpl searchTabVO = this.getQuoteSearchTabVO();
        if(searchVO!=null && searchTabVO !=null){
                searchVO.executeEmptyRowSet();
                searchTabVO.executeEmptyRowSet();
                        RowSetIterator iter = searchVO.createRowSetIterator("clear");
                        if (iter != null) {
                            if (iter.hasNext())
                                iter.next().remove();
                            iter.closeRowSetIterator();
                        }
                searchTabVO.setWhereClause("1=2");
                searchTabVO.executeQuery();              
                searchVO.clearCache();
                Row row = searchVO.createRow();
                if (row != null) {
                    searchVO.insertRow(row);
                    searchVO.setCurrentRow(row);
                }
                
            }
        }

    public void clearQuoteFields() {
        ViewObjectImpl quoteVO = this.getQuotesVO();
        if (quoteVO != null)
            quoteVO.executeEmptyRowSet();
//        RowSetIterator iter = quoteVO.createRowSetIterator("clear");
//        if (iter != null) {
//            if (iter.hasNext())
//                iter.next().remove();
//            iter.closeRowSetIterator();
//        }
        quoteVO.clearCache();
        Row row = quoteVO.createRow();
        if (row != null) {
            quoteVO.insertRow(row);
            quoteVO.setCurrentRow(row);
        }
    }

    /**
     * Container's getter for FileUpdDwnEOView1.
     * @return FileUpdDwnEOView1
     */
    public ViewObjectImpl getFileUpdDwnEOView1() {
        return (ViewObjectImpl)findViewObject("FileUpdDwnEOView1");
    }

    /**
     * Container's getter for NodeCategoryVO1.
     * @return NodeCategoryVO1
     */
    public ViewObjectImpl getNodeCategoryVO1() {
        return (ViewObjectImpl)findViewObject("NodeCategoryVO1");
    }

    @Override
    public void prepareSession(SessionData sessionData) {
        super.prepareSession(sessionData);
    }

    /**
     * Container's getter for QuotesVO1.
     * @return QuotesVO1
     */
    public ViewObjectImpl getQuotesVO() {
        return (ViewObjectImpl)findViewObject("QuotesVO");
    }

    /**
     * Container's getter for CustomerFaxNumForQuoteVO.
     * @return CustomerFaxNumForQuoteVO
     */
    public ViewObjectImpl getCustomerFaxNumForQuoteVO() {
        return (ViewObjectImpl)findViewObject("CustomerFaxNumForQuoteVO");
    }

    /**
     * Container's getter for QuoteSearchVO1.
     * @return QuoteSearchVO1
     */
    public ViewObjectImpl getQuoteSearchVO() {
        return (ViewObjectImpl)findViewObject("QuoteSearchVO");
    }

    /**
     * Container's getter for QuoteSearchTabVO1.
     * @return QuoteSearchTabVO1
     */
    public ViewObjectImpl getQuoteSearchTabVO() {
        return (ViewObjectImpl)findViewObject("QuoteSearchTabVO");
    }

    /**
     * Container's getter for ImportSourceVO1.
     * @return ImportSourceVO1
     */
    public ViewObjectImpl getImportSourceVO1() {
        return (ViewObjectImpl)findViewObject("ImportSourceVO1");
    }
}
