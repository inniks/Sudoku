package xxatcust.oracle.apps.sudoku.model.module;

import java.sql.Connection;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.Hashtable;
import java.util.List;

import javax.servlet.ServletContext;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import oracle.adf.share.ADFContext;
import oracle.adf.share.logging.ADFLogger;

import oracle.apps.fnd.ext.common.AppsRequestWrapper;
import oracle.apps.fnd.ext.common.CookieStatus;
import oracle.apps.fnd.ext.common.EBiz;
import oracle.apps.fnd.ext.common.Session;

import oracle.jbo.Row;
import oracle.jbo.RowSetIterator;
import oracle.jbo.SessionData;
import oracle.jbo.server.ApplicationModuleImpl;
import oracle.jbo.server.DBTransaction;
import oracle.jbo.server.ViewObjectImpl;


// ---------------------------------------------------------------------
// ---    File generated by Oracle ADF Business Components Design Time.
// ---    Thu Jan 24 16:53:17 IST 2019
// ---    Custom code may be added to this class.
// ---    Warning: Do not modify method signatures of generated methods.
// ---------------------------------------------------------------------
public class SudokuAMImpl extends ApplicationModuleImpl {
    /**
     * This is the default constructor (do not remove).
     */
    public SudokuAMImpl() {
    }
    static String url = null;
    private static ADFLogger _logger =
        ADFLogger.createADFLogger(SudokuAMImpl.class);
    AppsRequestWrapper wrappedRequest = null;
    HttpServletRequest request = null;
    HttpServletResponse response = null;
    Session appsSession = null;

    public Session getAppsSession() {
        return appsSession;
    }

    public String getCurrentUrl() {

        String currentUrlName = "";
        DBTransaction trans = getDBTransaction();
        Statement statement = null;
        ResultSet rows = null;
        String plsql =
            "select replace(HOME_URL,'AppsLogin') home_url from icx_parameters";

        statement = trans.createStatement(2);
        try {
            rows = statement.executeQuery(plsql);
            while (rows.next()) {
                currentUrlName = rows.getString("home_url");
            }
        } catch (Exception obj) {
            obj.printStackTrace();
        } finally {
            try {
                if (rows != null) {
                    rows.close();
                }
                if (statement != null) {
                    statement.close();
                }
            } catch (SQLException sqle) {
                sqle.printStackTrace();
            }
        }
        return currentUrlName;

    }

    public String getWrappedRequestAgent() {
        String agent = wrappedRequest.getEbizInstance().getAppsServletAgent();
        return agent;
    }

    private Connection getCurrentConnection() {
        Statement st = null;
        try {
            st = this.getDBTransaction().createStatement(0);
            return st.getConnection();
        } catch (SQLException s) {
            s.printStackTrace();
            return null;
        } finally {
            if (st != null) {
                try {
                    st.close();
                } catch (SQLException s2) {
                    _logger.info("HSOEOrderStatusAMImpl : getCurrentConnection-3 : 11111");
                    ;
                }
            }
        }
    }

    private String getApplServerId() {
        ServletContext servContext =
            (ServletContext)ADFContext.getCurrent().getEnvironment().getContext();
        String applServerId = servContext.getInitParameter("APPL_SERVER_ID");

        return applServerId;
    }

    public boolean checkEBSSession(HttpServletRequest request,
                                   HttpServletResponse response) {
        try {

            CookieStatus icxCookieStatus = null;
            Connection EBSconn = this.getCurrentConnection();
            EBiz instance = new EBiz(EBSconn, this.getApplServerId());
            _logger.info("Bundle AMimp: print ApplServerId " +
                         this.getApplServerId());
            _logger.info("Bundle AMimp: print instance " + instance);
            wrappedRequest =
                    new AppsRequestWrapper(request, response, EBSconn, instance);
            appsSession = wrappedRequest.getAppsSession();
            _logger.info("Bundle AMimp: print appsSession " + appsSession);

            icxCookieStatus =
                    appsSession.getCurrentState().getIcxCookieStatus();
            _logger.info("Bundle AMimp: print icxCookieStatus " +
                         icxCookieStatus);
            response.addHeader("X-UA-Compatible", "IE=EmulateIE9");

            if (!icxCookieStatus.equals(CookieStatus.VALID)) {
                return false;
            }
        } catch (Exception ob) {
            ob.printStackTrace();
            return false;
        }

        return true;
    }

    public Hashtable<String, String> getNodeCategoryMap() {
        ViewObjectImpl nodeCategoryVO = this.getNodeCategoryVO1();
        nodeCategoryVO.executeQuery();
        RowSetIterator rsi = nodeCategoryVO.createRowSetIterator(null);
        Hashtable<String, String> nodeCategoryMap =
            new Hashtable<String, String>();
        while (rsi.hasNext()) {
            Row currRow = rsi.getCurrentRow() ;
            if (currRow!=null && currRow.getAttribute("Segment1") != null &&
                currRow.getAttribute("Attribute7") != null) {
                nodeCategoryMap.put((String)currRow.getAttribute("Segment1"),
                                    (String)currRow.getAttribute("Attribute7"));
            }
        }
        rsi.closeRowSetIterator();
        return nodeCategoryMap;
    }

    /**
     * Container's getter for FileUpdDwnEOView1.
     * @return FileUpdDwnEOView1
     */
    public ViewObjectImpl getFileUpdDwnEOView1() {
        return (ViewObjectImpl)findViewObject("FileUpdDwnEOView1");
    }

    /**
     * Container's getter for NodeCategoryVO1.
     * @return NodeCategoryVO1
     */
    public ViewObjectImpl getNodeCategoryVO1() {
        return (ViewObjectImpl)findViewObject("NodeCategoryVO1");
    }

    @Override
    public void prepareSession(SessionData sessionData) {
        super.prepareSession(sessionData);
    }
}
